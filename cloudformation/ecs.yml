AWSTemplateFormatVersion: '2010-09-09'
Description: ECS cluster running single Parity node
Parameters:
  Namespace:
    Type: String

  # ECSAMI:
  #   Description: AMI id
  #   Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>

  SecurityGroup:
    Description: security group for ECS hosts
    Type: AWS::EC2::SecurityGroup::Id

  Subnets:
    Description: subnets to run ECS service in
    Type: List<AWS::EC2::Subnet::Id>

  InstanceType:
    Type: String
    Description: ECS instance type

  SnapshotId:
    Type: String
    Description: EBS Snapshot from which to initiate the chain data
    Default: ""

  VolumeSize:
    Type: Number
    Default: 100

  VolumeType:
    Type: String

  Iops:
    Type: Number
    Default: 2500

  KeyName:
    Type: String
    Description: SSH Key name to access the machine
    Default: ""

  NetworkName:
    Type: String
    Description: The Ethereum network

  SyncToBlock:
    Type: Number
    Description: which block number to sync to on the first sync
    MinValue: 1

  AlertsEmail:
    Description: get alerted when the first sync is complete and snaphotted
    Type: String
    AllowedPattern: "^[\\x20-\\x45]?[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$"
    ConstraintDescription: 'must be a valid email address'

Conditions:
  SSHAccess: !Not [!Equals [ !Ref KeyName, ""]]
  Syncing: !Equals [ !Ref SnapshotId, ""]

Mappings:
  # source:
  # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
  AWSRegionToAMI:
    us-east-2:
      AMI: ami-028a9de0a7e353ed9
    us-east-1:
      AMI: ami-00129b193dc81bc31
    us-west-2:
      AMI: ami-00d4f478
    us-west-1:
      AMI: ami-0d438d09af26c9583
    eu-west-3:
      AMI: ami-07da674f0655ef4e1
    eu-west-2:
      AMI: ami-a44db8c3
    eu-west-1:
      AMI: ami-0af844a965e5738db
    eu-central-1:
      AMI: ami-0291ba887ba0d515f
    ap-northeast-2:
      AMI: ami-047d2a61f94f862dc
    ap-northeast-1:
      AMI: ami-0041c416aa23033a2
    ap-southeast-2:
      AMI: ami-0092e55c70015d8c3
    ap-southeast-1:
      AMI: ami-091bf462afdb02c60
    ca-central-1:
      AMI: ami-192fa27d
    ap-south-1:
      AMI: ami-0c179ca015d301829
    sa-east-1:
      AMI: ami-0018ff8ee48970ac3
    us-gov-west-1:
      AMI: ami-c6079ba7

Resources:

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref Namespace

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${Namespace}-ecs-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'

      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        # includes:
        # - ecs:CreateCluster
        # - ecs:DeregisterContainerInstance
        # - ecs:DiscoverPollEndpoint
        # - ecs:Poll
        # - ecs:RegisterContainerInstance
        # - ecs:StartTelemetrySession
        # - ecs:Submit*
        # - ecr:GetAuthorizationToken
        # - ecr:BatchCheckLayerAvailability
        # - ecr:GetDownloadUrlForLayer
        # - ecr:BatchGetImage
        # - logs:PutLogEvents
        # - logs:CreateLogStream

      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - ec2:DescribeInstanceStatus
              - ec2:DescribeVolumes
              - ec2:DescribeSnapshots
              - ec2:CreateSnapshot
              - logs:CreateLogGroup
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
              - route53:*
              - cloudformation:DescribeStacks
              - elasticloadbalancing:RegisterTargets
              - elasticloadbalancing:DeregisterTargets
            Resource: "*"
          - Effect: Allow
            Action: sns:Publish
            Resource: !Ref SyncTopic

  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ECSRole

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      # AvailabilityZones: !Ref AvailabilityZones
      LaunchConfigurationName: !Ref ECSLaunchConfiguration
      VPCZoneIdentifier: !Ref Subnets
      # allow remove before replace
      MinSize: 1
      MaxSize: 2
      DesiredCapacity: 1
      Tags:
        - Key: Name
          Value: !Sub ${Namespace}-ecs-instance
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        # allow to remove during update
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT10M
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: true

  ECSLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: !If
        - SSHAccess
        - true
        - false
      ImageId:  !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
      InstanceType: !Ref InstanceType
      KeyName: !If
        - SSHAccess
        - !Ref KeyName
        - !Ref "AWS::NoValue"
      SecurityGroups:
        - !Ref SecurityGroup
      IamInstanceProfile: !Ref ECSInstanceProfile
      BlockDeviceMappings:
      - DeviceName: "/dev/sdh"
        Ebs:
          SnapshotId: !Ref SnapshotId
          VolumeSize: !Ref VolumeSize
          VolumeType: !Ref VolumeType
          Iops: !Ref Iops
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash
          set -x
          yum install -y aws-cfn-bootstrap jq
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup

    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              awslogs: []
          commands:
            01_add_instance_to_cluster:
              command: !Sub echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
            02_mkdir:
              command: "mkdir /data"
              test: "[ ! -d /data ]"
            03_mkfs:
              command: !If [ Syncing, "mkfs.ext4 /dev/sdh", "echo 'not running mkfs /dev/sdh'"]
            04_mount:
              command: "mount /dev/sdh /data"
              test: "! mountpoint -q /data"
            05_watch_update:
              command: !If
                - Syncing
                - "nohup /usr/local/bin/sync-and-alert.sh >> /var/log/sync_monitor.log 2>&1 &"
                - "echo 'synced, skipping sync_and_alert flow'"

          files:
            "/etc/cfn/cfn-hup.conf":
              mode: "000400"
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ECSLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
            "/etc/awslogs/awscli.conf":
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
            "/etc/awslogs/awslogs.conf":
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_group_name = ${ECSCluster}-/var/log/docker
                log_stream_name = ${ECSCluster}
                [/var/log/messages]
                file = /var/log/messages
                log_group_name = ${ECSCluster}-/var/log/docker
                log_stream_name = ${ECSCluster}
                datetime_format = %b %d %H:%M:%S
                [/var/log/docker]
                file = /var/log/docker
                log_group_name = ${ECSCluster}-/var/log/docker
                log_stream_name = ${ECSCluster}
                datetime_format = %Y-%m-%dT%H:%M:%S.%f
                [/var/log/ecs/ecs-init.log]
                file = /var/log/ecs/ecs-init.log.*
                log_group_name = ${ECSCluster}-/var/log/docker
                log_stream_name = ${ECSCluster}
                datetime_format = %Y-%m-%dT%H:%M:%SZ
                [/var/log/ecs/ecs-agent.log]
                file = /var/log/ecs/ecs-agent.log.*
                log_group_name = ${ECSCluster}-/var/log/docker
                log_stream_name = ${ECSCluster}
                datetime_format = %Y-%m-%dT%H:%M:%SZ
                [/var/log/ecs/audit.log]
                file = /var/log/ecs/audit.log.*
                log_group_name = ${ECSCluster}-/var/log/docker
                log_stream_name = ${ECSCluster}
                datetime_format = %Y-%m-%dT%H:%M:%SZ

            # "/etc/cron.d/mycron":
            #     mode: "000644"
            #     owner: root
            #     group: root
            #     content: |
            #       * * * * * root /usr/local/bin/sync-and-alert.sh

            "/usr/local/bin/sync-and-alert.sh":
              mode: "000755"
              owner: root
              group: root
              content: !Sub |
                set -x
                # set -euo pipefail

                export AWS_DEFAULT_REGION="${AWS::Region}"

                TARGET_BLOCK="${SyncToBlock}"
                TARGET_BLOCK_HEX=$(printf "%x\n" "$TARGET_BLOCK")
                STACK_NAME="${AWS::StackId}"
                LOCAL_IP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)
                AWS_INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
                ROOT_DISK_ID=$(aws ec2 describe-volumes --filter "Name=attachment.instance-id, Values=$AWS_INSTANCE_ID" | \
                  jq -r '.Volumes[] | select(.Attachments[].Device == "/dev/sdh") | .VolumeId')

                BLOCK_ZERO_RESP='{"result":null}'

                sync_to_block() {
                  echo "WILL EXIT AFTER SYNCING TO BLOCK $TARGET_BLOCK"
                  while true
                  do
                    SYNC_STATUS=$(curl -X POST -H 'Content-Type: application/json' \
                      --data "{\"JsonRpc\":\"2.0\",\"method\": \"eth_getBlockByNumber\", \"params\": [\"0x$TARGET_BLOCK_HEX\", true],\"id\":83}" \
                      "$LOCAL_IP:8545" || echo "$BLOCK_ZERO_RESP")

                    SYNC_STATUS=$(echo "$SYNC_STATUS" | jq -r .result)

                    if [ $(is_empty_or_null "$SYNC_STATUS") != "1" ];
                    then
                      echo "SYNC COMPLETE!"
                      break
                    fi

                    sleep 30 # seconds
                  done
                }

                is_empty_or_null() {
                  if [ "$1" == "null" ] || [ $(echo $1 | wc -c) -le 1 ];
                  then
                    echo 1
                  else
                    echo 0
                  fi
                }

                urlencode() {
                  echo $(python -c "import urllib; print urllib.quote('''$1''')")
                }

                ensure_stack_ready() {
                  while true;
                  do
                    STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" | jq -r .Stacks[].StackStatus)
                    if [ "$STATUS" == "CREATE_COMPLETE" ] || [ "$STATUS" == "UPDATE_COMPLETE" ] || [ "$STATUS" == "ROLLBACK_COMPLETE" ] || [ "$STATUS" == " or .StackStatus=="UPDATE_ROLLBACK_COMPLETE"" ];
                    then
                      break
                    elif [ "$STATUS" == "CREATE_IN_PROGRESS" ];
                    then
                      aws cloudformation wait stack-create-complete --stack-name "$STACK_NAME"
                    elif [ "$STATUS" == "UPDATE_IN_PROGRESS" ];
                    then
                      aws cloudformation wait stack-update-complete --stack-name "$STACK_NAME"
                    else
                      echo "unexpected stack status: $STATUS"
                      exit 1
                    fi
                  done

                  echo "stack ready!"
                }

                create_snapshot_and_alert() {
                  echo "taking snapshot of EBS volume: $ROOT_DISK_ID"
                  SNAPSHOT_ID=$(aws ec2 create-snapshot \
                    --volume-id "$ROOT_DISK_ID" \
                    --description "parity:${NetworkName}:$TARGET_BLOCK" \
                    | jq -r .SnapshotId)

                  echo "waiting for snapshot to finish: $SNAPSHOT_ID"
                  aws ec2 wait snapshot-completed --filters "Name=snapshot-id, Values=$SNAPSHOT_ID"
                  URL_ENCODED_STACK_ID=$(urlencode "$STACK_NAME")
                  UPDATE_URL="https://console.aws.amazon.com/cloudformation/home?region=${AWS::Region}#/stack/update?stackId=$URL_ENCODED_STACK_ID"

                  CURRENT_SNAPSHOT=$(echo "$PARAMETERS" | jq -c '.[] | select(.ParameterKey == "ChainSnapshotId")')
                  if [ $(is_empty_or_null "$CURRENT_SNAPSHOT") == "1" ]
                  then
                    PARAMETERS=$(echo $PARAMETERS | jq -c ".[.|length] |= . + {\"ParameterKey\":\"ChainSnapshotId\",\"ParameterValue\":\"$SNAPSHOT_ID\"}")
                  else
                    PARAMETERS=$(echo $PARAMETERS | jq -c "[.[] | select(.ParameterKey == \"ChainSnapshotId\").ParameterValue = \"$SNAPSHOT_ID\"]")
                  fi

                  UPDATE_COMMAND="aws cloudformation update-stack \
                    --stack-name $STACK_NAME \
                    --parameters $PARAMETERS \
                    --use-previous-template \
                    --capabilities CAPABILITY_NAMED_IAM"

                  PUBLISH_JSON="{\"TopicArn\":\"${SyncTopic}\",\"Message\":\"I took a snapshot of the synced chain\nSnapshot Id: $SNAPSHOT_ID\n\nEither:\n- follow this update stack link, and set the ChainSnapshotId parameter to $SNAPSHOT_ID: $UPDATE_URL\n- OR, use this AWS CLI update stack command: $UPDATE_COMMAND\"}"

                  aws sns publish --topic-arn "${SyncTopic}" \
                    --subject "Ethereum stack synced and ready for update!" \
                    --cli-input-json "$PUBLISH_JSON"
                }

                if [ "${SnapshotId}" == "" ];
                then
                  echo "will sync, snapshot chaindata and update stack"
                  ensure_stack_ready "$STACK_NAME"
                  sync_to_block "$TARGET_BLOCK"
                  create_snapshot_and_alert
                else
                  echo "already working from snapshot: ${SnapshotId}"
                fi

          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              awslogs:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/awslogs/awslogs.conf
                  - /etc/awslogs/awscli.conf

  SyncTopic:
    Type: AWS::SNS::Topic
    # Condition: Syncing
    Properties:
      TopicName: !Sub ${AWS::StackName}-${AWS::Region}-sync-alarm
      Subscription:
        - Protocol: email
          Endpoint: !Ref AlertsEmail

Outputs:

  Cluster:
    Description: cluster with parity and indexer
    Value: !Ref ECSCluster

  Role:
    Description: A reference to ECS service auto scaling role
    Value: !GetAtt ECSRole.Arn

  AutoScalingGroup:
    Description: A reference to ECS AutoScaling Group Name
    Value: !Ref ECSAutoScalingGroup
