AWSTemplateFormatVersion: '2010-09-09'
Description: ECS cluster running single Parity node (on mainnet)
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: specify if you want to launch into an existing VPC
  SyncInstanceType:
    Type: String
    Description: Instance to sync the chain with for the first time
    Default: c5.large
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
    ConstraintDescription: Please choose a valid instance type.
  PostSyncInstanceType:
    Type: String
    Description: Instance to use after first sync
    Default: t2.medium
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
    ConstraintDescription: Please choose a valid instance type.
  ChainSnapshotId:
    Type: String
    Description: EBS Snapshot from which to initiate the chain data
    Default: ""
  DNSName:
    Type: String
    Description: DNS name to register too
  KeyName:
    Type: String
    Description: SSH Key name to access the machine
    Default: ""
  RepositoryName:
    Type: String
    Description: Name of ECR repository to use
    Default: parity
    AllowedValues:
      - parity
  DesiredTaskCount:
    Type: Number
    Default: 1
  SyncVolumeType:
    Type: String
    Default: io1
    AllowedValues:
      - io1
      - gp2
      - st1
      - sc1
  PostSyncVolumeType:
    Type: String
    Default: gp2
    AllowedValues:
      - io1
      - gp2
      - st1
      - sc1
  SyncIops:
    Type: Number
    Default: 2500
  PostSyncIops:
    Type: Number
    Default: 300
  VolumeSize:
    Type: Number
    Default: 100
  SyncToBlock:
    Type: Number
    Description: which block number to sync to on the first sync
    MinValue: 1
  AlertsEmail:
    Description: get alerted when the first sync is complete and snaphotted
    Type: String
    AllowedPattern: "^[\\x20-\\x45]?[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$"
    ConstraintDescription: 'must be a valid email address'

  NetworkName:
    Type: String
    Description: The Ethereum network
    Default: mainnet
    AllowedValues:
      - mainnet
      # - morden
      - ropsten
      - rinkeby
      - kovan
    ConstraintDescription: The ID of the network must be between 1 and 100000.

  InstanceTenancy:
    Type: String
    Default: default
    AllowedValues:
      - default
      - dedicated

  # RunEthExplorer:
  #   Type: String
  #   AllowedValues:
  #     - "true"
  #     - "false"
  #   Default: "true"
  # RunEthStats:
  #   Type: String
  #   AllowedValues:
  #     - "true"
  #     - "false"
  #   Default: "true"

Mappings:
  # DefaultSyncToBlock:
  #   mainnet:
  #     block: 6200000
  #   ropsten:
  #     block: 3896360
  #   rinkeby:
  #     block: 2864810
  #   kovan:
  #     block: 8469871

  # NetworkNameToConstants:
  #   mainnet:
  #     id: 1
  #   mordern:
  #     id: 2
  #   ropsten:
  #     id: 3
  #   rinkeby:
  #     id: 4
  #   kovan:
  #     id: 42

  AWSRegionToAMI:
    us-east-2:
      AMI: ami-1b90a67e
    us-east-1:
      AMI: ami-cb17d8b6
    us-west-2:
      AMI: ami-05b5277d
    us-west-1:
      AMI: ami-9cbbaffc
    eu-west-3:
      AMI: ami-914afcec
    eu-west-2:
      AMI: ami-a48d6bc3
    eu-west-1:
      AMI: ami-bfb5fec6
    eu-central-1:
      AMI: ami-ac055447

Conditions:
  SSHAccess: !Not [!Equals [ !Ref KeyName, ""]]
  Syncing: !Equals [ !Ref ChainSnapshotId, ""]
  CreateVpc: !Equals [ !Ref VpcId, ""]

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Condition: CreateVpc
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: !Ref InstanceTenancy
      Tags:
        - Key: blockchain
          Value: ethereum
        - Key: client
          Value: parity
        - Key: network
          Value: !Ref NetworkName

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${AWS::StackName}-${NetworkName}-parity

  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${AWS::StackName}-${NetworkName}-logs
  AccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-${NetworkName}-access-parity-sg
      VpcId: !If
        - CreateVpc
        - !Ref Vpc
        - !Ref VpcId
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-${NetworkName}-sg
      SecurityGroupIngress:
        - FromPort: 30303
          ToPort: 30303
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
        - FromPort: 8545
          ToPort: 8545
          SourceSecurityGroupId: !GetAtt AccessSecurityGroup.GroupId
          IpProtocol: tcp
        - FromPort: 8546
          ToPort: 8546
          SourceSecurityGroupId: !GetAtt AccessSecurityGroup.GroupId
          IpProtocol: tcp
        - !If
          - SSHAccess
          -
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
            IpProtocol: tcp
          - !Ref "AWS::NoValue"

      VpcId: !If
        - CreateVpc
        - !Ref Vpc
        - !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${NetworkName}-sg
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${AWS::StackName}-${NetworkName}-ecs-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'

      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - ecs:CreateCluster
              - ecs:DeregisterContainerInstance
              - ecs:DiscoverPollEndpoint
              - ecs:Poll
              - ecs:RegisterContainerInstance
              - ecs:StartTelemetrySession
              - ecs:Submit*
              - ecr:BatchCheckLayerAvailability
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer
              - ecr:GetAuthorizationToken
              - ec2:DescribeInstanceStatus
              - ec2:DescribeVolumes
              - ec2:DescribeSnapshots
              - ec2:CreateSnapshot
              - logs:CreateLogStream
              - logs:CreateLogGroup
              - logs:PutLogEvents
              - logs:CreateLogStream
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
              - logs:PutLogEvents
              - route53:*
              - cloudformation:DescribeStacks
            Resource: "*"
          - Effect: Allow
            Action: sns:Publish
            Resource: !Ref SyncTopic

  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ECSRole

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        Fn::GetAZs:
          Ref: "AWS::Region"
      LaunchConfigurationName: !Ref ECSLaunchConfiguration
      MinSize: 1
      MaxSize: 2
      DesiredCapacity: 1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${NetworkName}-ecs-instance
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT10M
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: true

  ECSLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
      InstanceType: !If
        - Syncing
        - !Ref SyncInstanceType
        - !Ref PostSyncInstanceType
      KeyName: !If
        - SSHAccess
        - !Ref KeyName
        - !Ref "AWS::NoValue"
      SecurityGroups:
        - !Ref ECSSecurityGroup
      IamInstanceProfile: !Ref ECSInstanceProfile
      BlockDeviceMappings:
      - DeviceName: "/dev/sdh"
        Ebs:
          SnapshotId: !If
            - Syncing
            - !Ref "AWS::NoValue"
            - !Ref ChainSnapshotId
          VolumeSize: !Ref VolumeSize
          VolumeType: !If
            - Syncing
            - !Ref SyncVolumeType
            - !Ref PostSyncVolumeType
          Iops: !If
            - Syncing
            - !Ref SyncIops
            - !Ref PostSyncIops
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash
          set -x
          yum install -y aws-cfn-bootstrap jq
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup

    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              awslogs: []
          commands:
            01_add_instance_to_cluster:
              command: !Sub echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
            02_mkdir:
              command: "mkdir /data"
              test: "[ ! -d /data ]"
            03_mkfs:
              command: !If [ Syncing, "mkfs.ext4 /dev/sdh", "echo 'not running mkfs /dev/sdh'"]
            04_mount:
              command: "mount /dev/sdh /data"
              test: "! mountpoint -q /data"
            05_watch_update:
              command: !If
                - Syncing
                - "nohup /usr/local/bin/sync-and-alert.sh >> /var/log/sync_monitor.log 2>&1 &"
                - "echo 'synced, skipping sync_and_alert flow'"

          files:
            "/etc/cfn/cfn-hup.conf":
              mode: "000400"
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ECSLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
            "/etc/awslogs/awscli.conf":
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
            "/etc/awslogs/awslogs.conf":
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_group_name = ${ECSLogGroup}
                log_stream_name = {instance_id}/var/log/dmesg
                [/var/log/messages]
                file = /var/log/messages
                log_group_name = ${ECSLogGroup}
                log_stream_name = {instance_id}/var/log/messages
                datetime_format = %b %d %H:%M:%S
                [/var/log/docker]
                file = /var/log/docker
                log_group_name = ${ECSLogGroup}
                log_stream_name = {instance_id}/var/log/docker
                datetime_format = %Y-%m-%dT%H:%M:%S.%f
                [/var/log/ecs/ecs-init.log]
                file = /var/log/ecs/ecs-init.log.*
                log_group_name = ${ECSLogGroup}
                log_stream_name = {instance_id}/var/log/ecs-init
                datetime_format = %Y-%m-%dT%H:%M:%SZ
                [/var/log/ecs/ecs-agent.log]
                file = /var/log/ecs/ecs-agent.log.*
                log_group_name = ${ECSLogGroup}
                log_stream_name = {instance_id}/var/log/ecs/ecs-agent
                datetime_format = %Y-%m-%dT%H:%M:%SZ
                [/var/log/ecs/audit.log]
                file = /var/log/ecs/audit.log.*
                log_group_name = ${ECSLogGroup}
                log_stream_name = {instance_id}/var/log/ecs/audit
                datetime_format = %Y-%m-%dT%H:%M:%SZ

            # "/etc/cron.d/mycron":
            #     mode: "000644"
            #     owner: root
            #     group: root
            #     content: |
            #       * * * * * root /usr/local/bin/sync-and-alert.sh

            "/usr/local/bin/sync-and-alert.sh":
              mode: "000755"
              owner: root
              group: root
              content: !Sub |
                set -x
                # set -euo pipefail

                export AWS_DEFAULT_REGION="${AWS::Region}"

                TARGET_BLOCK="${SyncToBlock}"
                TARGET_BLOCK_HEX=$(printf "%x\n" "$TARGET_BLOCK")
                STACK_NAME="${AWS::StackId}"
                LOCAL_IP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)
                AWS_INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
                ROOT_DISK_ID=$(aws ec2 describe-volumes --filter "Name=attachment.instance-id, Values=$AWS_INSTANCE_ID" | \
                  jq -r '.Volumes[] | select(.Attachments[].Device == "/dev/sdh") | .VolumeId')

                BLOCK_ZERO_RESP='{"result":null}'

                sync_to_block() {
                  echo "WILL EXIT AFTER SYNCING TO BLOCK $TARGET_BLOCK"
                  while true
                  do
                    SYNC_STATUS=$(curl -X POST -H 'Content-Type: application/json' \
                      --data "{\"jsonrpc\":\"2.0\",\"method\": \"eth_getBlockByNumber\", \"params\": [\"0x$TARGET_BLOCK_HEX\", true],\"id\":83}" \
                      "$LOCAL_IP:8545" || echo "$BLOCK_ZERO_RESP")

                    SYNC_STATUS=$(echo "$SYNC_STATUS" | jq -r .result)

                    if [ $(is_empty_or_null "$SYNC_STATUS") != "1" ];
                    then
                      echo "SYNC COMPLETE!"
                      break
                    fi

                    sleep 30 # seconds
                  done
                }

                is_empty_or_null() {
                  if [ "$1" == "null" ] || [ $(echo $1 | wc -c) -le 1 ];
                  then
                    echo 1
                  else
                    echo 0
                  fi
                }

                urlencode() {
                  echo $(python -c "import urllib; print urllib.quote('''$1''')")
                }

                ensure_stack_ready() {
                  while true;
                  do
                    STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" | jq -r .Stacks[].StackStatus)
                    if [ "$STATUS" == "CREATE_COMPLETE" ] || [ "$STATUS" == "UPDATE_COMPLETE" ] || [ "$STATUS" == "ROLLBACK_COMPLETE" ];
                    then
                      break
                    elif [ "$STATUS" == "CREATE_IN_PROGRESS" ];
                    then
                      aws cloudformation wait stack-create-complete --stack-name "$STACK_NAME"
                    elif [ "$STATUS" == "UPDATE_IN_PROGRESS" ];
                    then
                      aws cloudformation wait stack-update-complete --stack-name "$STACK_NAME"
                    else
                      echo "unexpected stack status: $STATUS"
                      exit 1
                    fi
                  done

                  echo "stack ready!"
                }

                create_snapshot_and_alert() {
                  echo "taking snapshot of EBS volume: $ROOT_DISK_ID"
                  SNAPSHOT_ID=$(aws ec2 create-snapshot \
                    --volume-id "$ROOT_DISK_ID" \
                    --description "parity:${NetworkName}:$TARGET_BLOCK" \
                    | jq -r .SnapshotId)

                  echo "waiting for snapshot to finish: $SNAPSHOT_ID"
                  aws ec2 wait snapshot-completed --filters "Name=snapshot-id, Values=$SNAPSHOT_ID"
                  URL_ENCODED_STACK_ID=$(urlencode "$STACK_NAME")
                  UPDATE_URL="https://console.aws.amazon.com/cloudformation/home?region=${AWS::Region}#/stack/update?stackId=$URL_ENCODED_STACK_ID"

                  CURRENT_SNAPSHOT=$(echo "$PARAMETERS" | jq -c '.[] | select(.ParameterKey == "ChainSnapshotId")')
                  if [ $(is_empty_or_null "$CURRENT_SNAPSHOT") == "1" ]
                  then
                    PARAMETERS=$(echo $PARAMETERS | jq -c ".[.|length] |= . + {\"ParameterKey\":\"ChainSnapshotId\",\"ParameterValue\":\"$SNAPSHOT_ID\"}")
                  else
                    PARAMETERS=$(echo $PARAMETERS | jq -c "[.[] | select(.ParameterKey == \"ChainSnapshotId\").ParameterValue = \"$SNAPSHOT_ID\"]")
                  fi

                  UPDATE_COMMAND="aws cloudformation update-stack \
                    --stack-name $STACK_NAME \
                    --parameters $PARAMETERS \
                    --use-previous-template \
                    --capabilities CAPABILITY_NAMED_IAM"

                  PUBLISH_JSON="{\"TopicArn\":\"${SyncTopic}\",\"Message\":\"I took a snapshot of the synced chain\nSnapshot Id: $SNAPSHOT_ID\n\nEither:\n- follow this update stack link, and set the ChainSnapshotId parameter to $SNAPSHOT_ID: $UPDATE_URL\n- OR, use this AWS CLI update stack command: $UPDATE_COMMAND\"}"

                  aws sns publish --topic-arn "${SyncTopic}" \
                    --subject "Ethereum stack synced and ready for update!" \
                    --cli-input-json "$PUBLISH_JSON"
                }

                if [ "${ChainSnapshotId}" == "" ];
                then
                  echo "will sync, snapshot chaindata and update stack"
                  ensure_stack_ready "$STACK_NAME"
                  sync_to_block "$TARGET_BLOCK"
                  create_snapshot_and_alert
                else
                  echo "already working from snapshot: ${ChainSnapshotId}"
                fi

          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              awslogs:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/awslogs/awslogs.conf
                  - /etc/awslogs/awscli.conf

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${AWS::StackName}-${NetworkName}-service-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub parity
      TaskRoleArn: !Ref TaskRole
      NetworkMode: bridge
      ContainerDefinitions:
        - Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepositoryName}:latest
          Essential: true
          Memory: 3000
          MemoryReservation: 1800
          Name: parity
          PortMappings:
            - ContainerPort: 8545
              HostPort: 8545
              Protocol: tcp
            - ContainerPort: 8546
              HostPort: 8546
              Protocol: tcp
            - ContainerPort: 30303
              HostPort: 30303
              Protocol: tcp
          MountPoints:
            - ContainerPath: /root/.local/share/io.parity.ethereum/chains
              SourceVolume: parity-chains
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: parity
          # Environment:
          #   - Name: "TARGET_BLOCK"
          #     Value: "1"

      Volumes:
        - Host:
            SourcePath: /data/chains
          Name: parity-chains

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${AWS::StackName}-${NetworkName}-service
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref DesiredTaskCount
      TaskDefinition: !Ref TaskDefinition
      # TaskDefinition: !Join [ "", ['arn:aws:ecs:', !Ref "AWS::Region", ':', !Ref "AWS::AccountId", ':task-definition/parity:1']]

  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref DNSName

  UpdateDNSLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: mvayngrib-serverless-deployment
        S3Key: !Sub ${AWS::StackName}/lambda.zip
      FunctionName: !Sub ${AWS::StackName}-${AWS::Region}-${NetworkName}-update-dns
      Handler: functions/update-dns.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - UpdateDNSLambdaExecutionRole
          - Arn
      Runtime: nodejs8.10
      Timeout: 60

  UpdateDNSLambdaExecutionRole:
    Type: AWS::IAM::Role
    DependsOn:
      - ECSService

    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - ec2:*
            - ecs:*
            - route53:*
            Resource: '*'

  UpdateDNSLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-${AWS::Region}-${NetworkName}-update-dns
      RetentionInDays: 3

  DNSUpdater:
    Type: Custom::DNSUpdater
    Properties:
      ServiceToken: !GetAtt UpdateDNSLambda.Arn
      cluster: !Ref ECSCluster
      hostedZone: !Ref HostedZone
      dnsName: !Ref DNSName
      snapshotId: !Ref ChainSnapshotId

  SyncTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-${AWS::Region}-${NetworkName}-sync-alarm
      Subscription:
        - Protocol: email
          Endpoint: !Ref AlertsEmail

Outputs:
  ECSSecurityGroup:
    Description: Id of created ECSSecurityGroup
    Value: !Ref ECSSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-${NetworkName}-ECSSecurityGroup
  ECSCluster:
    Description: Id of created ECSCluster
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${AWS::StackName}-${NetworkName}-ECSCluster
  NameServer:
    Description: NS of created hosted zone
    Value: !Join [ ",", !GetAtt HostedZone.NameServers ]
    Export:
      Name: !Sub ${AWS::StackName}-${NetworkName}-NameServer
  AccessSecurityGroup:
    Description: SecurityGroup to access json-rpc
    Value: !Ref AccessSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-${NetworkName}-AccessSecurityGroup
